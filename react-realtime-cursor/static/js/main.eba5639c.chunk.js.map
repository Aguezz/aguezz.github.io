{"version":3,"sources":["config.js","api.js","components/AppBar.js","components/Content.js","serviceWorker.js","index.js"],"names":["HOST","axios","get","then","res","data","state","isOpen","handleDialog","setState","this","Fragment","AppBar","position","style","backgroundColor","Container","Toolbar","IconButton","edge","color","aria-label","Menu","Typography","variant","flexGrow","Tooltip","title","onClick","Info","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","React","Component","styles","canvas","css","textCenter","activeColor","Content","width","height","myCursor","x","y","cursors","colors","handleMove","socket","emit","draw","selectColor","ctx","fillStyle","fillRect","forEach","beginPath","arc","Math","PI","closePath","fill","drawCursor","api","io","on","refs","getContext","addEventListener","e","offsetX","offsetY","length","map","Card","key","raised","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eba5639c.chunk.js","sourcesContent":["export const HOST = 'https://react-realtime-cursor.herokuapp.com'\n","import axios from 'axios'\nimport { HOST } from './config'\n\nexport default {\n    canvas: () => axios.get(`${HOST}/canvas`).then(res => res.data)\n}\n","import React from 'react'\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    IconButton,\n    Container,\n    Tooltip,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle\n} from '@material-ui/core'\nimport { Menu as MenuIcon, Info as InfoIcon } from '@material-ui/icons'\n\nexport default class extends React.Component {\n    state = {\n        isOpen: false,\n    }\n\n    handleDialog = () => this.setState({ isOpen: !this.state.isOpen })\n\n    render() {\n        const { isOpen } = this.state\n        return (\n            <React.Fragment>\n                <AppBar position=\"static\" style={{ backgroundColor: '#009688' }}>\n                    <Container>\n                        <Toolbar>\n                            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                                <MenuIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\n                                Realtime Multiplayer Cursor\n                            </Typography>\n                            <Tooltip title=\"Info\">\n                                <IconButton color=\"inherit\" onClick={this.handleDialog}>\n                                    <InfoIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </Toolbar>\n                    </Container>\n                </AppBar>\n\n                <Dialog\n                    open={isOpen}\n                    onClose={this.handleDialog}>\n                    <DialogTitle>Application Usage Guide</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                        This is a cursor switching application in realtime where we need two or more people to access this page. Because this application cannot be felt if there is only one person accessing it\n                        <br />\n                        <br />\n                        You can also open two tabs to find out the features of this application.\n                        <br />\n                        <br />\n                        I suggest using a desktop when accessing this website\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleDialog} color=\"primary\" autoFocus>\n                            Agree\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n        )\n    }\n}","import React from 'react'\nimport io from 'socket.io-client'\nimport api from '../api'\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { Card } from '@material-ui/core'\nimport AppBar from './AppBar'\nimport { Typography } from '@material-ui/core'\nimport { HOST } from '../config'\n\nconst styles = {\n    canvas: css`\n        background-color: #fff;\n        display: block;\n        margin: auto;`,\n\n    textCenter: css`\n        text-align: center !important;`,\n\n    color: css`\n        display: inline-block !important;\n        width: 50px;\n        height: 50px;\n        border: 5px solid rgba(0,0,0,0);\n        margin: 0 5px;\n        cursor: pointer;\n        \n        &:hover {\n            border: 5px solid #eaeaea;\n        }`,\n\n    activeColor: css`\n        border: 5px solid #2c3e50 !important;`\n}\n\nclass Content extends React.Component {\n    state = {\n        canvas: {\n            width: 0,\n            height: 0\n        },\n        myCursor: {\n            x: 0,\n            y: 0\n        },\n        cursors: [],\n        colors: ['#16a085', '#27ae60', '#2980b9', '#8e44ad', '#2c3e50', '#f39c12', '#d35400', '#c0392b', '#bdc3c7', '#7f8c8d'],\n        activeColor: '#16a085',\n    }\n\n    async componentDidMount() {\n        const canvas = await api.canvas()\n        this.setState({ canvas })\n\n        this.socket = io(HOST)\n        this.socket.on('cursors', cursors => {\n            this.setState({ cursors })\n            this.draw()\n        })\n\n        this.canvas = this.refs.canvas\n        this.ctx = this.canvas.getContext('2d')\n        this.canvas.addEventListener('mousemove', (e) => {\n            const { offsetX: x, offsetY: y } = e\n            this.handleMove(x, y)\n        })\n    }\n\n    handleMove = (x, y, color) => {\n        this.setState({ myCursor: { x, y }, activeColor: color || this.state.activeColor })\n        this.socket.emit('move', x, y, this.state.activeColor)\n\n        this.draw()\n    }\n\n    selectColor = color => {\n        const { myCursor } = this.state\n\n        this.handleMove(myCursor.x, myCursor.y, color)\n    }\n\n    draw = () => {\n        const ctx = this.ctx\n        const { canvas,\n            // myCursor, activeColor\n        } = this.state\n\n        ctx.fillStyle = '#fff'\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n        const drawCursor = (x, y, color) => {\n            ctx.fillStyle = color || '#000'\n            ctx.beginPath()\n            ctx.arc(x, y, 15, 0, 2 * Math.PI)\n            ctx.closePath()\n            ctx.fill()\n        }\n\n        this.state.cursors.forEach(({ x, y, color }) => drawCursor(x, y, color))\n\n        // drawCursor(myCursor.x, myCursor.y, activeColor)\n    }\n\n    render() {\n        const { canvas, cursors, colors, activeColor } = this.state\n        return (\n            <React.Fragment>\n                <AppBar />\n\n                <br />\n                <Typography variant=\"h6\" css={styles.textCenter}>User : {cursors.length}</Typography>\n                <br />\n\n                <div css={styles.textCenter}>\n                    {colors.map(color =>\n                        <Card\n                            key={color}\n                            raised={activeColor === color}\n                            css={[styles.color, activeColor === color && styles.activeColor]}\n                            style={{ backgroundColor: color }}\n                            onClick={() => this.selectColor(color)} />\n                    )}\n                </div>\n\n\n                <br />\n\n                <canvas\n                    ref=\"canvas\"\n                    css={styles.canvas}\n                    width={canvas.width}\n                    height={canvas.height} />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Content\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Content';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}